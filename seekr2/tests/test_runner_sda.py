"""
test_runner_sda.py

test runner_sda.py script(s)
"""

import re
import os
import glob
import pathlib

import seekr2.modules.common_sim_sda as sim_sda
import seekr2.modules.runner_sda as runner_sda

TEST_DIRECTORY = os.path.dirname(__file__)

def extract_output_line(output_filename, tag):
    sim_file_old_lines = []
    with open(output_filename, 'r') as f:
        for line in f.readlines():
            sim_file_old_lines.append(line)
    for line in sim_file_old_lines:
        if line.strip().startswith(tag):
            result = line.split()[-1]    
            return result

def test_cleanse_bd_outputs(tmp_path):
    """
    Test the utility that 'cleanses' BD directories, that is, it
    removes files generated by old simulations.
    """
    directory = os.path.join(tmp_path, "cleanse_bd")
    if not os.path.exists(directory):
        os.mkdir(directory)
    files_exist1 = runner_sda.cleanse_bd_outputs(directory)
    assert not files_exist1
    results_filename = os.path.join(directory, "sda.out")
    pathlib.Path(results_filename).touch()
    traj_filename = os.path.join(directory, "traj_1")
    pathlib.Path(traj_filename).touch()
    assert len(os.listdir(directory)) > 0
    files_exist2 = runner_sda.cleanse_bd_outputs(directory, 
                                                       check_mode=False)
    assert files_exist2
    assert len(os.listdir(directory)) == 0
    return


def test_make_sda_input(host_guest_mmvt_sda_model):
    num_b_surface_trajectories = 1000
    bd_directory = os.path.join(host_guest_mmvt_sda_model.anchor_rootdir, 
                                "b_surface")
    input_filename = os.path.join(bd_directory, "sda_test.in")
    if os.path.exists(input_filename):
        os.remove(input_filename)
    runner_sda.make_sda_input(
        host_guest_mmvt_sda_model, host_guest_mmvt_sda_model.anchor_rootdir,  
        num_b_surface_trajectories, bd_directory=None)
    bd_directory = os.path.join(host_guest_mmvt_sda_model.anchor_rootdir, 
                                "b_surface")
    assert os.path.exists(input_filename)
    
    apbs_input_filename = os.path.join(bd_directory, "apbs_test.in")
    if os.path.exists(apbs_input_filename):
        os.remove(apbs_input_filename)
    runner_sda.make_sda_input(
        host_guest_mmvt_sda_model, host_guest_mmvt_sda_model.anchor_rootdir,
        num_b_surface_trajectories, bd_directory="b_surface")
    assert os.path.exists(apbs_input_filename)
    return

def test_make_sda_grids(host_guest_mmvt_sda_model):

    model = host_guest_mmvt_sda_model
    runner_sda.make_sda_grids(model, model.anchor_rootdir, 
                              model.sda_settings.sda_bin_dir, 
                              force_overwrite=True)

def test_run_hydropro(host_guest_mmvt_sda_model):

    model = host_guest_mmvt_sda_model
    hydropro_dir = os.path.expanduser(model.sda_settings.hydropro_dir)
    runner_sda.run_hydropro(model, model.anchor_rootdir, hydropro_dir)

def test_make_add_atoms(host_guest_mmvt_sda_model):

    model = host_guest_mmvt_sda_model
    runner_sda.make_add_atoms(model, model.anchor_rootdir)

def test_make_pdb_noh(host_guest_mmvt_sda_model):

    model = host_guest_mmvt_sda_model
    runner_sda.make_pdb_noh(model, model.anchor_rootdir)

def test_make_sda_reaction(host_guest_mmvt_sda_model):

    model = host_guest_mmvt_sda_model

    ghost_atom_prot = ["ATOM    148 GHO  GHO   148       5.007   8.433  17.796"]
    ghost_atom_lig = ["ATOM     16 GHO  GHO    16      -0.056  -0.323   2.439"]
    bd_directory = os.path.join(model.anchor_rootdir, 
                                "b_surface")
    abs_reaction_path = os.path.join(bd_directory, "p2.rxna")
    runner_sda.make_sda_reaction(model, model.anchor_rootdir,
                                 ghost_atom_prot, 
                                 ghost_atom_lig)
    assert os.path.exists(abs_reaction_path)
    return

def test_modify_variables(host_guest_mmvt_sda_model):
    """
    Test the function that modifies variables within the BD input.
    """
    bd_directory = os.path.join(
        host_guest_mmvt_sda_model.anchor_rootdir,
        host_guest_mmvt_sda_model.k_on_info.b_surface_directory)
    print("host_guest_mmvt_model.anchor_rootdir:", 
          host_guest_mmvt_sda_model.anchor_rootdir)
    assert os.path.exists(host_guest_mmvt_sda_model.anchor_rootdir)
    print("bd_directory:", bd_directory)
    assert os.path.exists(bd_directory)
    simulation_input = os.path.join(bd_directory, 
                                     "sda_test.in")
    runner_sda.make_sda_input(
        host_guest_mmvt_sda_model, 
        host_guest_mmvt_sda_model.anchor_rootdir, 500)
    runner_sda.modify_variables(
        bd_directory, host_guest_mmvt_sda_model.k_on_info.sda_output_glob, 
        100, 500, simulation_input, restart=False)
    
    
    result = extract_output_line(simulation_input, "nruns")
    assert result == "100"
    result = extract_output_line(simulation_input, "dseed")
    assert result == "500"
    return

def test_runner_sda_b_surface_mmvt(host_guest_mmvt_sda_model):
    model = host_guest_mmvt_sda_model
    bd_directory = os.path.join(model.anchor_rootdir, 
                                "b_surface")
    sda_bin_dir = model.sda_settings.sda_bin_dir

    runner_sda.run_nam_simulation(
        sda_bin_dir, bd_directory, 
        model.k_on_info.bd_output_glob)

    assert len(glob.glob(os.path.join(bd_directory, "sda*.out"))) == 1
    
    # Test restart and force overwrite
    n_trajectories = model.k_on_info.b_surface_num_trajectories * 2
    runner_sda.modify_variables(
        bd_directory, model.k_on_info.bd_output_glob, n_trajectories, 
        restart=True)
    runner_sda.run_nam_simulation(
        sda_bin_dir, bd_directory, 
        model.k_on_info.bd_output_glob, force_overwrite=True)
    assert len(glob.glob(os.path.join(bd_directory, "sda*.out"))) == 1
    return

def test_runner_sda_b_surface_elber(host_guest_elber_model):
    model = host_guest_elber_model
    bd_directory = os.path.join(model.anchor_rootdir, 
                                "b_surface")
    sda_bin_dir = model.sda_bin_dir

    runner_sda.make_pdb_noh(model, bd_directory)
    runner_sda.make_sda_grids(model.sda_settings.sda_bin_dir, 
               bd_directory, force_overwrite=True)
    runner_sda.make_sda_reaction(bd_directory)

    hydropro_dir = os.path.expanduser(model.sda_settings.hydropro_dir)
    runner_sda.run_hydropro(model, bd_directory, hydropro_dir)

    runner_sda.make_add_atoms(model, bd_directory)

    runner_sda.run_nam_simulation(
        sda_bin_dir, bd_directory, 
        model.k_on_info.bd_output_glob)

    assert len(glob.glob(os.path.join(bd_directory, "sda*.out"))) == 1
    
    # Test restart and force overwrite
    n_trajectories = model.k_on_info.b_surface_num_trajectories * 2
    runner_sda.modify_variables(
        bd_directory, model.k_on_info.bd_output_glob, n_trajectories, 
        restart=True)
    runner_sda.run_nam_simulation(
        sda_bin_dir, bd_directory, 
        model.k_on_info.bd_output_glob, force_overwrite=True)
    assert len(glob.glob(os.path.join(bd_directory, "sda*.out"))) == 1
    return